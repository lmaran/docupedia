name: Build and Test
on:
    # push:
    #     branches: ["**", "!*-dist"]
    # pull_request:
    #     branches: ["main"]
    push:
        branches:
            - main
jobs:
    build:
        runs-on: ubuntu-latest
        environment:
            name: production
            url: https://docupedia.ro
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"

            - name: Install dependencies
              run: npm install

            - name: Prettier (format code)
              run: npm run prettier

            - name: ESLint (analyze code)
              run: npm run lint

            - name: Build
              run: npm run build-prod --if-present

            - name: Test
              run: npm test

            - name: Deploy
              run: |
                  # Existing structure:
                  #  ~/work/docupedia/docupedia (contains "master" branch)
                  #  ~/work/docupedia/tmpFolder (contains "dist" branch)

                  # Run all commands below from tmpFolder
                  rm -rf node_modules
                  # cp -rf  ../docupedia/dist/* .
                  # cp ../docupedia/package.json .
                  echo "Waiting for npm install..."
                  npm install --omit=dev
                  rm -f package-lock.json  # keep package.json (we need "type": "module")

                  [ -d public ] || mkdir -p public # create public folder if not exists
                  [ -f public/version.txt ] || touch public/version.txt # create a file if not exists
                  date > public/version.txt # add a timestamp to a file

                  # rm -f .env # remove the old file
                  echo "PORT  = ${{vars.PORT}}" >> .env
                  echo "VAR1 = \"${{vars.VAR1}}\"" >> .env
                  echo "SECRET1 = \"${{secrets.SECRET1}}\"" >> .env

                  # cat .env # view file content

                  cp -rf  public/* dist
                  cp -rf node_modules/* dist
                  cp package.json dist
                  cp .env dist

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: dist
                      # dist/**/*
                      # node_modules
                      # public
                      # package.json
                      # .env

            - name: Deploy
              run: |
                  git clone -b "${GITHUB_REF##*/}"-dist --single-branch https://github.com/${GITHUB_REPOSITORY}.git ../tmpFolder
                  git config --global user.name "${GITHUB_REPOSITORY_OWNER}" # we need to set an author for commit
                  git config --global user.email "lucian.maran@outlook.com"

                  # Existing structure:
                  #  ~/work/docupedia/docupedia (contains "master" branch)
                  #  ~/work/docupedia/tmpFolder (contains "dist" branch)

                  # Run all commands below from tmpFolder
                  cd ../tmpFolder
                  rm -rf *
                  cp -rf  ../docupedia/dist/* .
                  cp ../docupedia/package.json .
                  echo "Waiting for npm install..."
                  npm install --omit=dev
                  rm -f package-lock.json  # keep package.json (we need "type": "module")

                  [ -d public ] || mkdir -p public # create public folder if not exists
                  [ -f public/version.txt ] || touch public/version.txt # create a file if not exists
                  date > public/version.txt # add a timestamp to a file

                  rm -f .env # remomve the old file
                  echo "PORT  = ${{vars.PORT}}" >> .env
                  echo "VAR1 = \"${{vars.VAR1}}\"" >> .env
                  echo "SECRET1 = \"${{secrets.SECRET1}}\"" >> .env

                  # cat .env # view file content

                  git add -A

                  git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
                  git commit -m "."
                  git push origin

            # Uncoment the two lines below for remote debug (just use in a terminal the provided url for ssh)
            #- name: Setup upterm session
            #  uses: lhotari/action-upterm@v1
